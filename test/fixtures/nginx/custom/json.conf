user  nginx;
worker_processes  auto;
error_log  /var/log/nginx/error.log info;
pid        /var/run/nginx.pid;
events { worker_connections  1024; }

http {
	#include       mime.types;
	#default_type  text/html;
	charset utf-8;
    log_format json '{ "time_iso8601": "$time_iso8601", "browser": [{"modern_browser": "$modern_browser", "ancient_browser": "$ancient_browser", "msie": "$msie"}], "core": [{"args": "$args", "arg": { "arg_example": "$arg_example"}, "body_bytes_sent": "$body_bytes_sent", "bytes_sent": "$bytes_sent", "cookie": { "cookie_example": "$cookie_example" }, "connection": "$connection", "connection_requests": "$connection_requests", "content_length": "$content_length", "content_type": "$content_type", "document_root": "$document_root", "document_uri": "$document_uri","host": "$host", "hostname": "$hostname", "http": { "http_example": "$http_example" }, "https": "$https", "is_args": "$is_args", "limit_rate": "$limit_rate", "msec": "$msec", "nginx_version": "$nginx_version", "pid": "$pid", "pipe": "$pipe", "proxy_protocol_addr": "$proxy_protocol_addr", "query_string": "$query_string", "realpath_root": "$realpath_root", "remote_addr": "$remote_addr", "remote_port": "$remote_port", "remote_user": "$remote_user", "request": "$request", "request_body": "$request_body", "request_body_file": "$request_body_file", "request_completion": "$request_completion", "request_filename": "$request_filename", "request_length": "$request_length", "request_method": "$request_method", "request_time": "$request_time", "request_uri": "$request_uri", "scheme": "$scheme", "sent_http_": { "sent_http_example": "$sent_http_example" }, "server_addr": "$server_addr", "server_name": "$server_name", "server_port": "$server_port", "server_protocol": "$server_protocol", "status": "$status", "tcpinfo_rtt": "$tcpinfo_rtt", "tcpinfo_rttvar": "$tcpinfo_rttvar", "tcpinfo_snd_cwnd": "$tcpinfo_snd_cwnd", "tcpinfo_rcv_space": "$tcpinfo_rcv_space", "uri": "$uri" }]}';
	access_log  /var/log/nginx/access.log  main;
	proxy_cache_path /html/cache-jpg keys_zone=jpg:100m;
	sendfile        on;
	keepalive_timeout  10;
	gzip  on;
	gzip_types
		application/javascript
		application/json
		application/rss+xml
		application/xhtml+xml
		application/xml
		font/opentype
		image/svg+xml
		image/x-icon
		text/css
		text/plain
		text/x-component;
	root /html/leete.ru;
	server {
		listen 80 default_server;
		server_name .foo.ru;
		status_zone httponly;
		location / {
			return 301 https://$http_host$request_uri;
		}
		location /phone {
			root /html/foo.ru;
			include /etc/nginx/fastcgi_params;
			fastcgi_pass php;
			fastcgi_index index.php;
			fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		}
	}
	server {
		listen 443 ssl http2;
		server_name .foo.org;
		root /html/foo.org;
		location = /favicon.ico { empty_gif; }
		location /nginx-blog { return 302 /nginx/blog/; }
		location / {
			index index.html;
			location ~ \.conf {
				default_type text/plain;
			}
		}
		location /status.html {
			auth_basic on;
			auth_basic_user_file /html/htaccess;
			root /usr/share/nginx/html;
		}
		location /status {
			auth_basic on;
			auth_basic_user_file /html/htaccess;
			status;
		}
	}
	upstream php {
		zone php 64k;
		server unix:/var/run/php.sock;
	}
	server {
		listen 443 ssl http2;
		server_name .foo.ru;
		root /html/foo.ru;
		index index.html index.php;
		location = / {
			return 302 /img/;
		}
		location /img {
			if (!-e $request_filename) {
				rewrite ^/img/(.+)$ /img/index.php;
			}
			location ~ \.php {
				include /etc/nginx/fastcgi_params;
				fastcgi_pass php;
				fastcgi_index index.php;
				fastcgi_split_path_info ^(.+?\.php)(/.*)$;
				fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
			}
			location ~* \.(?:css|js|gif|jpe?g|png)$ {
				expires 7d;
				add_header Pragma public;
				add_header Cache-Control "public";
			}
		}
		location /phone {
				include /etc/nginx/fastcgi_params;
				fastcgi_pass php;
				fastcgi_index index.php;
				fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		}

		location / {
			index index.html;
		}
		location /files {
			auth_basic on;
			auth_basic_user_file /html/htaccess;
			autoindex on;
		}

	}
	server {
		listen 8080;
		allow 127.0.0.1;
		deny all;
		location /status {
			status;
		}
		location /stub {
			stub_status;
		}
	}
}




